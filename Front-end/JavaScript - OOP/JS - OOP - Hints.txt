// when we have many parameters in a function - we can fill Array with them

function sum(...items){
	if(Array.isArray(items[0])){ // check if first element of items is Array
		items = items[0];
	}
}

sum(1, 2, 3); // -> it will become [1, 2, 3]

---------------------------------------------------------------------------------

// convert array-like objects to arrays
var args = [].slice.call(arguments); // -> copy arguments (e.x. array) to array

var sum = args.reduce((s, n) => s + n, 0) 
// The reduce() method applies a function against an accumulator and each value of 
//the array (from left-to-right) to reduce it to a single value.

------------------------------------------------------------------------------	

// MODULE -> we execute only once generator (IIFE) and after that we have all
// function wich are expose with "return". Only they are visible from outside.

var generator = (function(){
	// lastId is available only inside the IIFE
	var lastId = 0; // lastId is "private"
	
	function getNextId(){
		return lastId += 1;
	}
	
	return { // in this way we return Object
		getId: getNextId, // property of the Object "getId" with value function getNextId
		
	}
}());
  // from outside of the function we have access only on the part "return" (which is exposed)
console.log(generator.getId() // call the function);

--------------------------------------------------------------------------