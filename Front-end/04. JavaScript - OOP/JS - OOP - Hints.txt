// when we have many parameters in a function - we can fill Array with them

function sum(...items){
	if(Array.isArray(items[0])){ // check if first element of items is Array
		items = items[0];
	}
}

sum(1, 2, 3); // -> it will become [1, 2, 3]

----------------------------------------------------------------------------------------

// convert array-like objects to arrays
var args = [].slice.call(arguments); // -> copy arguments (e.x. array) to array

var sum = args.reduce((s, n) => s + n, 0) 
// The reduce() method applies a function against an accumulator and each value of 
//the array (from left-to-right) to reduce it to a single value.

--------------------------------------------------------------------------------------	

// MODULE -> we execute only once generator (IIFE) and after that we have access from outside
// only on the "return" part of the anonymous function.

var generator = (function(){
	// lastId is available only inside the IIFE
	var lastId = 0; // lastId is "private"
	
	function getNextId(){
		return lastId += 1;
	}
	
	return { // in this way we return Object
		getId: getNextId, // property of the Object "getId" with value function getNextId
		
	}
}());
  // from outside of the function we have access only on the part "return" (which is exposed)
console.log(generator.getId() // ->([function name].[object property name]);


// shorter generator

const nextId = (function() {
        let counter = 0;
        return function() {
            counter += 1;
            return counter;
        };
    }());

---------------------------------------------------------------------------------------

// using variable numbers of parameters with the function

function my_log(...args) {
     //args is an Array
     console.log(args);
     //You can pass this array as parameters to another function
     console.log(...args);
}

---------------------------------------------------------------------------------------

function name(parameter 1, parameter 2){}

name.length = 2 // -> gives the number of the parametrs on the function

---------------------------------------------------------------------------------------

// To inherit (extend) a method from the parent class -> invoke super.[name of the method]
// and after that add extended logic for the method from the child class

play() {
	super.play() + 'some logic';
}

-------------------------------------------------------------------------
	
// useful methods over arrays

map, slice, splice, sort, find, filter, indexOf	
	
	
	